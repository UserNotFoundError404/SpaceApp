import { Prediction, VettingRecord, LightCurve } from './supabase';

export interface CandidateReport {
  id: string;
  keplerName: string;
  confidence: number;
  isExoplanet: boolean;
  transitDepth?: number;
  period?: number;
  oddEvenDepth: { odd?: number; even?: number };
  centroidShift: { x?: number; y?: number };
  vettingChecklist: {
    transit_shape: boolean;
    odd_even_consistent: boolean;
    centroid_stable: boolean;
    no_secondary_eclipse: boolean;
    snr_adequate: boolean;
  };
  vettingStatus?: string;
  notes?: string;
  timestamp: string;
}

export function generateCSVReport(reports: CandidateReport[]): string {
  const headers = [
    'ID',
    'Kepler Name',
    'Confidence Score',
    'Is Exoplanet',
    'Transit Depth',
    'Period (days)',
    'Odd Transit Depth',
    'Even Transit Depth',
    'Centroid Shift X',
    'Centroid Shift Y',
    'Transit Shape OK',
    'Odd/Even Consistent',
    'Centroid Stable',
    'No Secondary Eclipse',
    'SNR Adequate',
    'Vetting Status',
    'Notes',
    'Timestamp'
  ];

  const rows = reports.map(r => [
    r.id,
    r.keplerName,
    r.confidence.toFixed(4),
    r.isExoplanet ? 'YES' : 'NO',
    r.transitDepth?.toFixed(6) || 'N/A',
    r.period?.toFixed(4) || 'N/A',
    r.oddEvenDepth.odd?.toFixed(6) || 'N/A',
    r.oddEvenDepth.even?.toFixed(6) || 'N/A',
    r.centroidShift.x?.toFixed(4) || 'N/A',
    r.centroidShift.y?.toFixed(4) || 'N/A',
    r.vettingChecklist.transit_shape ? 'PASS' : 'FAIL',
    r.vettingChecklist.odd_even_consistent ? 'PASS' : 'FAIL',
    r.vettingChecklist.centroid_stable ? 'PASS' : 'FAIL',
    r.vettingChecklist.no_secondary_eclipse ? 'PASS' : 'FAIL',
    r.vettingChecklist.snr_adequate ? 'PASS' : 'FAIL',
    r.vettingStatus || 'pending',
    `"${(r.notes || '').replace(/"/g, '""')}"`,
    r.timestamp
  ]);

  const csvContent = [
    headers.join(','),
    ...rows.map(row => row.join(','))
  ].join('\n');

  return csvContent;
}

export function downloadCSV(reports: CandidateReport[], filename: string = 'exoplanet_candidates.csv'): void {
  const csv = generateCSVReport(reports);
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);

  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function generatePDFContent(report: CandidateReport): string {
  return `
EXOPLANET CANDIDATE REPORT
===========================

Candidate ID: ${report.id}
Kepler Name: ${report.keplerName}
Generated: ${new Date(report.timestamp).toLocaleString()}

DETECTION SUMMARY
-----------------
Confidence Score: ${(report.confidence * 100).toFixed(2)}%
Classification: ${report.isExoplanet ? 'EXOPLANET CANDIDATE' : 'NON-PLANET'}
Transit Depth: ${report.transitDepth?.toFixed(6) || 'N/A'}
Orbital Period: ${report.period?.toFixed(4) || 'N/A'} days

ODD-EVEN TRANSIT ANALYSIS
-------------------------
Odd Transit Depth: ${report.oddEvenDepth.odd?.toFixed(6) || 'N/A'}
Even Transit Depth: ${report.oddEvenDepth.even?.toFixed(6) || 'N/A'}
Consistency: ${report.vettingChecklist.odd_even_consistent ? 'PASS' : 'FAIL'}

CENTROID ANALYSIS
-----------------
X Shift: ${report.centroidShift.x?.toFixed(4) || 'N/A'} pixels
Y Shift: ${report.centroidShift.y?.toFixed(4) || 'N/A'} pixels
Stability: ${report.vettingChecklist.centroid_stable ? 'STABLE' : 'UNSTABLE'}

VETTING CHECKLIST
-----------------
✓ Transit Shape: ${report.vettingChecklist.transit_shape ? 'PASS' : 'FAIL'}
✓ Odd/Even Consistent: ${report.vettingChecklist.odd_even_consistent ? 'PASS' : 'FAIL'}
✓ Centroid Stable: ${report.vettingChecklist.centroid_stable ? 'PASS' : 'FAIL'}
✓ No Secondary Eclipse: ${report.vettingChecklist.no_secondary_eclipse ? 'PASS' : 'FAIL'}
✓ SNR Adequate: ${report.vettingChecklist.snr_adequate ? 'PASS' : 'FAIL'}

VETTING STATUS
--------------
Status: ${report.vettingStatus?.toUpperCase() || 'PENDING'}
Notes: ${report.notes || 'No additional notes'}

---
Report generated by Exoplanet Detection AI System
Data source: NASA Kepler/TESS Mission Archives
`;
}

export function downloadPDF(report: CandidateReport, filename: string = 'exoplanet_report.txt'): void {
  const content = generatePDFContent(report);
  const blob = new Blob([content], { type: 'text/plain;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);

  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function createReportFromPrediction(
  prediction: Prediction,
  lightCurve: LightCurve,
  vetting?: VettingRecord
): CandidateReport {
  return {
    id: prediction.id,
    keplerName: lightCurve.metadata.keplerName || lightCurve.kepler_id,
    confidence: prediction.confidence_score,
    isExoplanet: prediction.is_exoplanet,
    transitDepth: prediction.transit_depth,
    period: prediction.period,
    oddEvenDepth: prediction.odd_even_depth,
    centroidShift: prediction.centroid_shift,
    vettingChecklist: vetting?.checklist || {
      transit_shape: false,
      odd_even_consistent: false,
      centroid_stable: false,
      no_secondary_eclipse: false,
      snr_adequate: false
    },
    vettingStatus: vetting?.status,
    notes: vetting?.notes,
    timestamp: prediction.created_at
  };
}
